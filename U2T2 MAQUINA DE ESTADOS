-- EJERCICIO N° 1




library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;

			

entity controldetren is
   Port ( tiempo, sensor, clk, sp : in  STD_LOGIC;
           PA, PC, PARO, AVANCE : out  STD_LOGIC;
           Q1,Q0 : inout  STD_LOGIC);
end controldetren;

architecture Behavioral of controldetren is


 type estados is (A,B,C,D);
 signal edo_pres, edo_fut: estados;
begin 
 p_estado: process (edo_pres, tiempo, sensor, sp) 
 begin 
 case edo_pres is 
 when A=> PA <='1';
 PC <='0'; PARO <='0'; AVANCE <='0'; Q1 <='0'; Q0 <='0';
 
  if TIEMPO ='1' then 
  edo_fut <= B;
  else 
  edo_fut <= A;
end if;

when B => PA <= '0';
 PC <= '1';
PARO<='0'; 
AVANCE <= '0'; 
Q1<= '0'; 
Q0<= '1';

 if sp='1' then 
 edo_fut <= C;
 else 
 edo_fut <= B;
 end if;
 

when C=> PA <='0';
 PC <= '0'; 
PARO <= '0'; 
AVANCE <= '1'; 
Q1 <= '1'; 
Q0 <= '0';


 if sensor ='1' then 
 edo_fut <= D;
 else 
 edo_fut <= C;
 end if;
 
 when D=> PA <='0';
 PC <= '0'; 
 PARO <='1'; 
 AVANCE <= '0'; 
 Q1<= '1'; 
 Q0<= '1';
 edo_fut <= A;

end case;

end process p_estado;
 
p_reloj: process (clk) 
begin

  if (clk' event and clk='1') then 
   edo_pres <= edo_fut;
  end if;
  end process p_reloj;
  

end Behavioral;






-- EJERCICIO N°2



library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;

entity maquina is
    Port ( CLK,MONEDA,MP,PRECIO,LC,LS : in  STD_LOGIC;
           CAP,LIMPIA,SIRVE,CAMBIO,DEC,IM,Q0,Q1,Q2 : out  STD_LOGIC);
end maquina;

architecture Behavioral of maquina is
type estados is (A,B,C,D,E,F,G,H);
signal edo_pres,edo_fut: estados;
begin
	p_estados: process (edo_pres,MONEDA,MP,PRECIO,LC,LS) begin
case edo_pres is
when A => CAP<='0';
 LIMPIA <= '0'; 
 SIRVE <='0';
 CAMBIO <= '0'; 
 DEC <= '0';
 IM<='1';
	Q2<='0';
	Q1<='0';
	Q0<='0';
		if MONEDA='1' then edo_fut<=B; 
		else edo_fut<=A;
		end if;
	
	
when B => CAP<='0';
LIMPIA <= '0';
 SIRVE <='0';
 CAMBIO <= '0';
 DEC <= '0';
 IM<='0';
	Q2 <= '0'; 
	Q1 <= '0';
	Q0 <='1';
		if MONEDA='0' then edo_fut<=C; 
		else edo_fut<=B;
		end if;
		
		
when C => CAP<='0';
LIMPIA <= '0';
 SIRVE <='0'; 
 CAMBIO <= '0';
 DEC <= '0';
 IM<='0';
	Q2<='0'; 
	Q1<='1';
	Q0<='0';
		if MP='0' then edo_fut<=D;
		else edo_fut<=A;
		end if;
		
		
when D => CAP<='0';
LIMPIA <= '0'; 
SIRVE <='0'; 
CAMBIO <= '0'; 
DEC <= '0';
IM<='0';
	Q2<='0';
	Q1<='1';
	Q0<='1';
		if PRECIO='0' then edo_fut<=H; 
		else edo_fut<=D; 
		end if;
		
when E => CAP<='0';
LIMPIA <= '0'; 
SIRVE <='1'; 
CAMBIO <= '0'; 
DEC <= '0';
IM<='0';
	Q2<='1';
	Q1<='0';
	Q0<='0';
		if LS='0' then edo_fut<=E; 
		else
		edo_fut<=F; end if;
		
when F => CAP<='1';
LIMPIA <= '1';
 SIRVE <='0';
 CAMBIO <= '0';
 DEC <= '0';
 IM<='0';
	Q2<='1'; 
	Q1<='0'; 
	Q0<='1';
		

when G => CAP<='0';
LIMPIA <= '0'; 
SIRVE <='0'; 
CAMBIO <= '1';
 DEC <= '0';
 IM<='0';
	Q2<='1'; 
	Q1<='1'; 
	Q0<='1';
		if LC='0' then edo_fut<=G;
		else edo_fut<=H; 
		end if;
		
when H => CAP<='0';
LIMPIA <= '0';
 SIRVE <='0';
 CAMBIO <= '0';
 DEC <= '1';
 IM<='0';
	
end case;
end process p_estados;
p_reloj: process (clk) begin
	if(clk'event and clk= '1')then 
		edo_pres <=edo_fut;
		end if;
	end process p_reloj;


end Behavioral;



-- EJERCICIO N°3

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;


entity monitor is
    Port ( clk, fx, cont4,boton : in  STD_LOGIC;
           reset, inc, activa,alarma : out  STD_LOGIC);
end monitor;


architecture Beh of monitor is

	type estados1 is (A,B,C,D,E,F,G,H,I,J,K,L);
	signal edo_pres, edo_fut: estados1;

begin
	p_estados1 : process (edo_pres, clk, fx, cont4, boton)
begin 

		case edo_pres is 
		when A => reset <= '0';
		inc <= '0'; 
		activa <= '0';
		alarma <= '0';
		edo_fut <= B;
		
		
		when B => reset <= '0';
		inc <= '0'; 
		activa <= '0';
		alarma <= '0';
		if boton = '1' then 
		edo_fut <= C;
		else 
		edo_fut<= B;
		end if;
		
		
		
		when C => reset <= '0';
		inc <= '0'; 
		activa <= '0';
		alarma <= '0';
		if fx = '1' then 
		edo_fut <= D;
		else 
		edo_fut<= H;
		end if;
		
		
		when D => reset <= '0';
		inc <= '0'; 
		activa <= '0';
		alarma <= '0';
		if boton = '1' then 
		edo_fut <= D;
		else 
		edo_fut<= E;
		end if;
		
		
		when E => reset <= '0';
		inc <= '0'; 
		activa <= '0';
		alarma <= '0';
		if cont4 = '1' then 
		edo_fut <= G;
		else 
		edo_fut<= F;
		end if;
		
		
		when F => reset <= '0';
		inc <= '1'; 
		activa <= '0';
		alarma <= '0';
		edo_fut <= B;
		
		
		when G => reset <= '0';
		inc <= '0'; 
		activa <= '1';
		alarma <= '0';
		edo_fut <= A;
		
		
		
		
		when H => reset <= '0';
		inc <= '0'; 
		activa <= '0';
		alarma <= '0';
		if boton = '1' then 
		edo_fut <= H;
		else 
		edo_fut<= I;
		end if;
		
		
		
		when I => reset <= '0';
		inc <= '0'; 
		activa <= '0';
		alarma <= '0';
		if cont4 = '1' then 
		edo_fut <= L;
		else 
		edo_fut <= J;
		end if;
		

		when J => reset <= '0';
		inc <= '1'; 
		activa <= '0';
		alarma <= '0';
		edo_fut <= K;
		
		
		
		when K => reset <= '0';
		inc <= '0'; 
		activa <= '0';
		alarma <= '0';
		if boton = '1' then 
		edo_fut <= H;
		else 
		edo_fut<= K;
		end if;
		
		
		
		
		when L => reset <= '0';
		inc <= '0'; 
		activa <= '0';
		alarma <= '1';
		edo_fut <= A;
		
		
		end case;
		end process p_estados1; 
		
		
		reloj : process  (clk)
		begin 
		if (clk' event and clk ='1') then 
		edo_pres <= edo_fut;
		end if;
		end process;

 		

end Beh;
